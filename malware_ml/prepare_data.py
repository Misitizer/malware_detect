#from catboost import Pool
import pandas as pd
from sklearn.preprocessing import LabelEncoder

DEFAULT_CATEGORICAL_FEATURES = [
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'Platform',
    'Processor',
    'OsVer',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'SmartScreen',
    'Census_MDC2FormFactor',
    'Census_PrimaryDiskTypeName',
    'Census_ChassisTypeName',
    'Census_PowerPlatformRoleName',
    'Census_InternalBatteryType',
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_FlightRing'
]
DEFAULT_NUMERIC_FEATURES = [
    'RtpStateBitfield',
    'IsSxsPassiveMode',
    'AVProductStatesIdentifier',
    'AVProductsInstalled',
    'AVProductsEnabled',
    'HasTpm',
    'CountryIdentifier',
    'CityIdentifier',
    'OrganizationIdentifier',
    'GeoNameIdentifier',
    'LocaleEnglishNameIdentifier',
    'OsBuild',
    'OsSuite',
    'IsProtected',
    'IeVerIdentifier',
    'Firewall',
    'Census_OEMNameIdentifier',
    'Census_OEMModelIdentifier',
    'Census_ProcessorCoreCount',
    'Census_ProcessorManufacturerIdentifier',
    'Census_ProcessorModelIdentifier',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_HasOpticalDiskDrive',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_InternalBatteryNumberOfCharges',
    'Census_OSBuildNumber',
    'Census_OSBuildRevision',
    'Census_OSUILocaleIdentifier',
    'Census_FirmwareManufacturerIdentifier',
    'Census_FirmwareVersionIdentifier',
    'Census_IsSecureBootEnabled',
    'Census_IsTouchEnabled',
    'Census_IsPenCapable',
    'Census_IsAlwaysOnAlwaysConnectedCapable',
    'Wdft_IsGamer',
    'Wdft_RegionIdentifier'
]
DEFAULT_TARGET = 'HasDetections'


def df_to_pool(df,
               numeric_features=DEFAULT_NUMERIC_FEATURES,
               categorical_features=DEFAULT_CATEGORICAL_FEATURES,
               target_column=DEFAULT_TARGET,
               ):
    columns = numeric_features + categorical_features
    target = None
    if target_column in df.columns:
        target = df[target_column]
    df = df[columns].copy()
    for col in categorical_features:
        df.loc[:, col] = df[col].fillna(-1).apply(lambda x: str(x))
    return Pool(
            df,
            label=target,
            cat_features=categorical_features)

def df_for_bayes(df,
                 numeric_features=DEFAULT_NUMERIC_FEATURES,
                 categorical_features=DEFAULT_CATEGORICAL_FEATURES,
                 target_column=DEFAULT_TARGET
                 ):
    columns = numeric_features + categorical_features
    columns.append(target_column)
    df = df[columns].copy()
    le  = LabelEncoder()
    for col in categorical_features:
        df.loc[:, col] = le.fit_transform(df[col].fillna(-1).apply(lambda x: str(x)))
    return df


def json_to_pool(json_data):
    df = pd.DataFrame(json_data, index=[0])
    return df_to_pool(df)
